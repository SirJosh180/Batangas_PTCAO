Index: Batangas_PTCAO/src/app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\n\r\nfrom flask import Flask, render_template, request, redirect, url_for, session, flash, send_from_directory\r\nfrom extension import db\r\nfrom model import User, BusinessRegistration\r\n\r\napp = Flask(__name__, template_folder='routes', static_folder='static')\r\napp.config.from_object('config.Config')\r\napp.secret_key = \"SECRET_KEY\"\r\ndb.init_app(app)\r\n\r\n@app.route('/')\r\ndef home():\r\n    return render_template('Login.html')\r\n\r\n\r\n# needs test case for incorrect password input\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n   if request.method == 'POST':\r\n       user_email = request.form.get('email')\r\n       password = request.form.get('password')\r\n       user = User.query.filter_by(user_email=user_email).first()\r\n       if user and user.check_password(password):\r\n           session['account_id'] = user.user_id\r\n           return redirect(url_for('dashboard'))\r\n       else:\r\n           flash('Invalid email or password', 'error')\r\n           return render_template('Login.html')\r\n   return render_template('Login.html')\r\n\r\n@app.route('/register', methods=['GET', 'POST'])\r\ndef register():\r\n    if request.method == 'POST':\r\n        user_email = request.form.get('username')\r\n        password = request.form.get('password')\r\n        confirm_password = request.form.get('confirm-password')\r\n\r\n        if password != confirm_password:\r\n            flash('Passwords do not match', 'error')\r\n            return render_template('LoginCredentials.html')\r\n\r\n        # Changed from \"user\" to work with \"users\" table\r\n        existing_user = User.query.filter_by(user_email=user_email).first()\r\n        if existing_user:\r\n            flash('Email already exists', 'error')\r\n            return render_template('LoginCredentials.html')\r\n\r\n        new_user = User(user_email=user_email)\r\n        new_user.set_password(password)\r\n        db.session.add(new_user)\r\n        db.session.commit()\r\n\r\n        flash('Registration successful', 'success')\r\n        return redirect(url_for('login'))\r\n\r\n    return render_template('LoginCredentials.html')\r\n\r\n@app.route('/business_registration', methods=['GET', 'POST'])\r\ndef business_registration():\r\n    if 'account_id' not in session:\r\n        flash('Please log in first', 'error')\r\n        return redirect(url_for('login'))\r\n\r\n    if request.method == 'POST':\r\n        # Collect business registration details\r\n        business_reg_data = {\r\n            'account_id': session['account_id'],\r\n            'business_registration_no': request.form.get('business-registration'),\r\n            'business_name': request.form.get('business-name'),\r\n            'official_contact_no': request.form.get('official-contact'),\r\n            'business_address': request.form.get('business-address'),\r\n            'taxpayer_name': request.form.get('taxpayer-name'),\r\n            'total_employees': request.form.get('total-employees'),\r\n            'total_rooms': request.form.get('total-rooms'),\r\n            'total_beds': request.form.get('total-beds')\r\n        }\r\n\r\n        # save business registration\r\n        new_business = BusinessRegistration(**business_reg_data)\r\n        db.session.add(new_business)\r\n        db.session.commit()\r\n\r\n        # Redirect to next po\r\n        return redirect(url_for('special_services'))\r\n\r\n    return render_template('Registration.html')\r\n\r\n@app.route('/logout')\r\ndef logout():\r\n    session.pop('user_id', None)\r\n    return redirect(url_for('login'))\r\n\r\n@app.route('/static/<path:filename>')\r\ndef serve_static_file(filename):\r\n    if allowed_file(filename):\r\n        return send_from_directory(os.path.join(app.root_path, 'static'), filename)\r\n    else:\r\n        return 'File type not allowed', 400\r\n\r\ndef allowed_file(filename):\r\n    ALLOWED_EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif']\r\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Batangas_PTCAO/src/app.py b/Batangas_PTCAO/src/app.py
--- a/Batangas_PTCAO/src/app.py	(revision 817d18b0bea9d26e6861364424c26c88d8e39116)
+++ b/Batangas_PTCAO/src/app.py	(date 1737878219824)
@@ -15,6 +15,8 @@
 
 
 # needs test case for incorrect password input
+# bakit di gumagana
+
 @app.route('/login', methods=['GET', 'POST'])
 def login():
    if request.method == 'POST':
